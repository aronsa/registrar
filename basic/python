import math
import operator

capacities = {} # capacities of rooms. e.g: room at index 0 has capacity 84
teacher_class = [] # the class number that each teacher teaches. e.g: teacher at index 0 teaches class no.5

text_file = open("demo_constraints.txt", "r")
class_time = text_file.readline()
rooms_num = int(text_file.readline().split("\t")[1])
for i in range(rooms_num):
    line = text_file.readline().split("\t")
    capacities[int(line[0])] = int(line[1])

capacities = sorted(capacities.items(), key=operator.itemgetter(1)) # a list of tuples. format: (room number, capacity)
print(capacities)


class_num = int(text_file.readline().split("\t")[1]) # total number of classes
teacher_num = int(text_file.readline().split("\t")[1]) # total number of teachers
for i in range(class_num):
    teacher_class.append(int(text_file.readline().split("\t")[1]))


student_prefs = [] # a list of list that contains student preferences

text_file = open("demo_studentprefs.txt", "r")
student_num = int(text_file.readline().split("\t")[1]) # number of students
for i in range(student_num):
    prefs = text_file.readline().split("\t")[1].split(' ')
    for index in range(4):
        prefs[index] = int(prefs[index])
    student_prefs.append(prefs)





#main portion of code
#eventually revise these values

#teachersAvailible is removed with a ranking in classConflicts
classPopularity = [0] * class_num
classScheduled = [False] * class_num
classConflicts = [[0]*class_num]*class_num
#assuming class capacities exist.
{k: v for k, v in sorted(capacities.items(), key=lambda item: item[1])} # sorting the capacities dictionary

for (p in student_prefs):
  #p is a list, containing all of the classes that this student would like to take
  for c in p:
    classPopularity[c]+=1

  #student conflicts
  for i in range(0,len(p)):
      for j in range (i,len(p)):
        a = p[i]
        b = p[j]
        classConflicts[a,b]+=1
        classConflicts[b,a]+=1

  	#teacher conflicts
  	#need to find all of the classes that a given teacher is teaching
  while len(teacher_class)>0:
    a = teacher_class.pop()
    b = teacher_class.pop(teacher_class.index(t0))
    classConflicts[a,b]=student_num
    classConflicts[b,a]=student_num

  print(classConflicts)
    #any other conflict weighting can be done here

    #now, each pair of classes must be ranked in decreasing order of conflict

